# -*- coding: utf-8 -*-
"""Untitled71.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eJKxNpjqcxoJsglde8rLuaNnct_4HaFv
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
from google.colab import files

def load_image(image_path):
    pic_imread = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)
    if pic_imread is None:
        raise ValueError(f"Image not loaded. Check the path: {image_path}")
    pic = cv2.cvtColor(pic_imread, cv2.COLOR_BGR2RGB)
    return pic

image_paths = ["/content/6.jpg",
               "/content/42.jpg"]

pics = [load_image(path) for path in image_paths]

# Function to isolate a specific cluster in the segmented image
def aff_cluster(cluster_index, segmented_image, labels):
    mask = (labels == cluster_index)
    cluster_img = np.zeros_like(segmented_image)
    cluster_img = cluster_img.reshape((-1, 3))
    cluster_img[mask] = segmented_image.reshape((-1, 3))[mask]
    cluster_img = cluster_img.reshape(segmented_image.shape)

    # Get average color of that cluster (first occurrence)
    hex_val = rgb_to_hex(*segmented_image.reshape((-1, 3))[mask][0])
    return cluster_img, hex_val

# Function to clean and display digit clusters
def show_clean_digit_cluster(segmented_image, labels, cluster_index):
    # Recreate the cluster image
    cluster_img = np.zeros_like(segmented_image)
    mask = (labels == cluster_index)
    cluster_img = cluster_img.reshape((-1, 3))
    cluster_img[mask] = segmented_image.reshape((-1, 3))[mask]
    cluster_img = cluster_img.reshape(segmented_image.shape)

    # Convert to grayscale and threshold
    gray = cv2.cvtColor(cluster_img, cv2.COLOR_RGB2GRAY)
    _, binary = cv2.threshold(gray, 40, 255, cv2.THRESH_BINARY)

    # Morphological cleanup (remove isolated noise)
    kernel = np.ones((2, 2), np.uint8)
    cleaned = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel, iterations=1)

    plt.figure(figsize=(5, 5))
    plt.imshow(cleaned, cmap='gray')
    plt.title(f" Cleaned Digit Cluster {cluster_index}")
    plt.axis("off")
    plt.show()

# K-means++ Initialization and Clustering
def initialize_centroids_plus_plus(data, k):
    centroids = [data[np.random.randint(len(data))]]
    for _ in range(1, k):
        dists = np.min([np.sum((data - c)**2, axis=1) for c in centroids], axis=0)
        probs = dists / np.sum(dists)
        next_centroid = data[np.random.choice(len(data), p=probs)]
        centroids.append(next_centroid)
    return np.array(centroids)

def assign_clusters(data, centroids):
    distances = np.linalg.norm(data - centroids[:, np.newaxis], axis=2)
    return np.argmin(distances, axis=0)

def update_centroids(data, labels, k):
    return np.array([
        data[labels == i].mean(axis=0) if np.any(labels == i) else data[np.random.randint(0, len(data))]
        for i in range(k)
    ])

def kmeans(data, k, max_iters=100, tol=1e-4):
    centroids = initialize_centroids_plus_plus(data, k)
    for _ in range(max_iters):
        labels = assign_clusters(data, centroids)
        new_centroids = update_centroids(data, labels, k)
        if np.all(np.abs(new_centroids - centroids) < tol):
            break
        centroids = new_centroids
    return centroids, labels

def segment_and_show_clusters_only(image_paths, k=18):
    for image_path in image_paths:
        pic = load_image(image_path)
        pixel_values = pic.reshape((-1, 3)).astype(np.float32)
        criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)
        centroids, labels = kmeans(pixel_values, k)

        segmented_image = centroids[labels].reshape(pic.shape).astype(np.uint8)

        fig, axs = plt.subplots(1, k, figsize=(4 * k, 5))
        for i in range(k):
            cluster_img, hex_val = aff_cluster(i, segmented_image, labels)
            axs[i].imshow(cluster_img)
            axs[i].set_title(f"Cluster {i}")
            axs[i].axis("off")
        plt.tight_layout()
        plt.show()

# Show clusters for the uploaded images
image_paths = ["/content/6.jpg","/content/42.jpg"]
segment_and_show_clusters_only(image_paths, k=10)